import json
import requests
from time import sleep

api_key = "my-api-key"
account = "my-account"
endpoint = "my-endpoint"
version = "my-version"

url_enqueue = f"https://api.mindee.net/v1/products/{account}/{endpoint}/v{version}/predict_async"
headers = {"Authorization": f"Token {api_key}"}

with open("/path/to/the/file.ext", "rb") as file_handle:
    files = {"document": file_handle}
    response_enqueue = requests.post(url_enqueue, files=files, headers=headers)

json_response_enqueue = response_enqueue.json()

if not response_enqueue.ok:
    raise RuntimeError(json_response_enqueue["api_request"]["error"])

job_id = json_response_enqueue["job"]["id"]

url_parse_queued = f"https://api.mindee.net/v1/products/{account}/{endpoint}/v{version}/documents/queue/{job_id}"
sleep(4)
tries = 0
job_status = ""
while tries < 30:
    response_parse = requests.get(url_parse_queued, headers=headers)
    if not response_parse.ok:
        raise RuntimeError(json_response_enqueue["api_request"]["error"])
    json_response_parse = response_parse.json()
    job_status = json_response_parse["job"]["status"]
    if job_status == "completed":
        break
    else:
        print(json_response_parse["job"])

    tries += 1
    sleep(2)

if job_status != "completed":
    raise RuntimeError(f"Async parsing timed out after {tries} tries")

print(json.dumps(json_response_parse["document"], indent=2))
